Secret: bd041ca7901bd51a2ac865b8562d28f27ecc78836fae8e03a149da22fa895d22
Public: 8420bc5541866675a4c719d9ecb5670073ff8d9fd27f4e378eb5b31b4d487b27

Sergey:3Pos3BkKm65jQL2fjH71G7VTu3mefLKFfy

 /**
     
 * Make API request with given params. Signs the request with secret key.
    
 * @param params
    
 * @return
    
 */
   
 static Response sendPOST(String url, Map<String, String> params) 
{
     
        params.put("public_key", PUBLIC_KEY);

        String urlParameters = buildQueryString(params, UTF_8);

        Response response = new Response();

        StringBuffer buf = new StringBuffer();


        URL obj = null;

        try {

            obj = new URL(url);

            HttpsURLConnection con = (HttpsURLConnection) obj.openConnection();


            // add request header

            con.setRequestProperty("HMAC", encodeHMAC(SECRET_KEY, urlParameters));

            con.setRequestMethod("POST");

            con.setDoOutput(true);

            con.setDoInput(true);


            // Send post request

            DataOutputStream wr = new DataOutputStream(con.getOutputStream());

            wr.writeBytes(urlParameters);

            wr.flush();

            wr.close();


            // Get result

            response.responseCode = con.getResponseCode();

            InputStream is;

            if(response.responseCode == 200) {

                is = con.getInputStream();

            }else{

                is = con.getErrorStream();

            }

            BufferedReader in = new BufferedReader(new InputStreamReader(is));

            String inputLine;

            while ((inputLine = in.readLine()) != null) {

                buf.append(inputLine);

            }

            in.close();

            if(response.responseCode == 200) {

                response.responseData = new JSONObject(buf.toString());

            }else{

                try{

                    response.responseData = new JSONObject(buf.toString());

                    log("ERROR: HTTP " + response.responseCode + ": \n" + response.responseData.toString(4));

                }catch (JSONException e) {

                    log("ERROR: HTTP " + response.responseCode + ": " + buf.toString());

                }

            }

        } catch (MalformedURLException e) {

            log("ERROR: Invalid URL: " + url);

            e.printStackTrace();

        } catch (ProtocolException e) {

            log("ERROR: Invalid request method");

            e.printStackTrace();

        } catch (IOException e) {

            log("ERROR: input/output operation");

            e.printStackTrace();

        } catch (JSONException e) {

            log("ERROR: Invalid json response: " + buf.toString());

            e.printStackTrace();

        } catch (NoSuchAlgorithmException e) {

            log("ERROR: Can't find HmacSHA256 algorithm");

            e.printStackTrace();

        } catch (InvalidKeyException e) {

            log("ERROR: Invalid secret key");

            e.printStackTrace();

        }
        return response;

    }



    static String encodeHMAC(String key, String data) throws UnsupportedEncodingException, NoSuchAlgorithmException, InvalidKeyException 
{

        Mac sha256_HMAC = Mac.getInstance("HmacSHA256");

        SecretKeySpec secret_key = new SecretKeySpec(key.getBytes(UTF_8), "HmacSHA256");

        sha256_HMAC.init(secret_key);


        return 	DatatypeConverter.printHexBinary(sha256_HMAC.doFinal(data.getBytes(UTF_8))).toLowerCase();

    }



    static String buildQueryString(Map<String, String> parameters, String encoding)
 {

        return parameters.entrySet().stream()

                .map(entry -> encodeParameter(entry.getKey(), entry.getValue(), encoding))

                .reduce((param1, param2) -> param1 + "&" + param2)

                .orElse("");

    }



    static String encodeParameter(String key, String value, String encoding)
 {

        return urlEncode(key, encoding) + "=" + urlEncode(value, encoding);

    }



    static String urlEncode(String value, String encoding) {

        try {

            return URLEncoder.encode(value, encoding);

        }
 catch (UnsupportedEncodingException e) 
{

            throw new IllegalArgumentException("Cannot url encode " + value, e);

        }

    }


}

*******************************************************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Globalization;
using System.Timers;
using System.Net;
using System.IO;


namespace ConsoleApp1
{
    class Program
    {
        static Timer myTimer = new System.Timers.Timer();
        static DateTime TimeNow;
        static byte Count;
        static Boolean IsOk = true;
        static string wallet = "35HUFFdAKdVpKFXm9Yj7N3FQGFVWwcPvRt";
        static void Main(string[] args)
        {    
            myTimer.Elapsed += timer1_Tick;
            myTimer.Interval = 1 * 60 * 1000;
            myTimer.Start();
            Console.WriteLine("Работаю");
            TimeNow = DateTime.Now;
            string sTimeNow = TimeNow.ToString();
            Console.WriteLine(sTimeNow.Substring(11, 5));
            GetAndShowSpeed(wallet);
            Console.WriteLine("Press the Enter key to exit the program at any time... ");
            Console.ReadLine();

        }
        public static void GetAndShowSpeed(string Wallet)
        {
            string Answer = GetNiceHashAPI(Wallet);
          //  richTextBox1.Text = Answer;
            int iNumStart, iNumEnd;
            string sFind = "\"a\":";
            iNumStart = Answer.IndexOf(sFind);
            string subAnswer, Speed;
            if (iNumStart > 0)
            {
                iNumEnd = Answer.IndexOf("\"}", iNumStart);
                subAnswer = Answer.Substring(iNumStart + 5, iNumEnd - iNumStart - 5);
                Speed = subAnswer;

            }
            else
            {
                Speed = "ФЕРМА СТОИТ!";
                IsOk = false;
                Count += 1;
                myTimer.Stop();
                myTimer.Interval = 1 * 60 * 1000;
                myTimer.Start();
                if (Count > 3) { Console.WriteLine("Ферма стоит!!!"); }
            }

            if (IsOk)
            {
                Console.WriteLine("Текущая скорость: {0} H/sec", Speed);
                Count = 0;
                myTimer.Stop();
                myTimer.Interval = 5 * 60 * 1000;
                myTimer.Start();
            }
            else
            {
                Console.WriteLine( Speed);
                Console.WriteLine(" {0} Проход",Count.ToString());
            }


        }

        private static string GetNiceHashAPI(string BTCaddr)
        {
            string HTTPS_URL = "https://api.nicehash.com/api";


            var postData = "?method=stats.provider.workers";
            postData += "&addr=" + BTCaddr;
            HTTPS_URL += postData;

            var data = Encoding.ASCII.GetBytes(postData);

          //  richTextBox1.Text = postData;
          //  richTextBox1.Text += Convert.ToChar(13);

            var request = (WebRequest)WebRequest.Create(HTTPS_URL);
            request.ContentType = "application/json"; // x - www - form - urlencoded";
            request.Method = "POST";

            request.ContentLength = data.Length;

            using (var stream = request.GetRequestStream())
            {
                stream.Write(data, 0, data.Length);
                stream.Close();
            }
            var response = (WebResponse)request.GetResponse();
            var responseString = new StreamReader(response.GetResponseStream()).ReadToEnd();
            response.Close();
            string answer = responseString.Substring(0);
            return answer;
        }

        private static void timer1_Tick(object sender, EventArgs e)
        {
            TimeNow = DateTime.Now;
            string sTimeNow = TimeNow.ToString();
            Console.WriteLine( sTimeNow.Substring(11, 5));
            GetAndShowSpeed(wallet);
        }

    }
}
